generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(cuid())
  name                   String?
  email                  String                   @unique
  image                  String?
  role                   String?
  serviceType            String?
  refreshTokenEncrypted  String?
  description            String?
  specialties            String?
  hourlyRate             Int?
  currency               String                   @default("INR")
  meetingDuration        Int?
  createdAt              DateTime                 @default(now())
  isDummy                Boolean                  @default(false)
  accounts               Account[]
  appointmentsAsBuyer    Appointment[]            @relation("BuyerToAppointments")
  appointmentsAsSeller   Appointment[]            @relation("SellerToAppointments")
  reviewsGiven           Review[]                 @relation("ReviewerToReviews")
  reviewsReceived        Review[]                 @relation("SellerToReviews")
  sellerAvailability     SellerAvailability[]
  sellerDateAvailability SellerDateAvailability[]
  buyerSlotLocks         SlotLock[]               @relation("BuyerSlotLocks")
  sellerSlotLocks        SlotLock[]               @relation("SellerSlotLocks")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  scope             String?
  expires_at        Int?
  id_token          String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Appointment {
  id                 String   @id @default(cuid())
  title              String
  sellerId           String
  buyerId            String
  start              DateTime
  end                DateTime
  duration           Int?
  timezone           String
  googleEventId      String?
  buyerGoogleEventId String?
  meetLink           String?
  confirmationEmail  String?
  createdAt          DateTime @default(now())
  buyer              User     @relation("BuyerToAppointments", fields: [buyerId], references: [id])
  seller             User     @relation("SellerToAppointments", fields: [sellerId], references: [id])

  @@unique([sellerId, start])
}

model SellerAvailability {
  id        String   @id @default(cuid())
  sellerId  String
  dayOfWeek Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  seller    User     @relation(fields: [sellerId], references: [id])
}

model SellerDateAvailability {
  id        String   @id @default(cuid())
  sellerId  String
  date      DateTime
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  seller    User     @relation(fields: [sellerId], references: [id])

  @@unique([sellerId, date])
}

model Review {
  id         String   @id @default(cuid())
  sellerId   String
  reviewerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewer   User     @relation("ReviewerToReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  seller     User     @relation("SellerToReviews", fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, reviewerId])
}

model SlotLock {
  id        String   @id @default(cuid())
  sellerId  String
  buyerId   String
  date      DateTime
  startTime String
  endTime   String
  status    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buyer     User     @relation("BuyerSlotLocks", fields: [buyerId], references: [id], onDelete: Cascade)
  seller    User     @relation("SellerSlotLocks", fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, date, startTime, endTime])
  @@index([status, expiresAt])
}
